# -*- coding: utf-8 -*-
"""Project1 Priyanshu[Edulyt]

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13kibrjF8TwYZjjAJiLdvYrISoE0P7sR6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

file_path = 'database.xls'
excel_data = pd.ExcelFile(file_path)


customer_acquisition = excel_data.parse('Customer Acqusition')
spend = excel_data.parse('Spend')
repayment = excel_data.parse('Repayment')

customer_acquisition = customer_acquisition.applymap(lambda x: x.strftime('%Y-%m-%d %H:%M:%S') if isinstance(x, pd.Timestamp) else x)
spend = spend.applymap(lambda x: x.strftime('%Y-%m-%d %H:%M:%S') if isinstance(x, pd.Timestamp) else x)
repayment = repayment.applymap(lambda x: x.strftime('%Y-%m-%d %H:%M:%S') if isinstance(x, pd.Timestamp) else x)


customer_acquisition_array = customer_acquisition.values
spend_array = spend.values
repayment_array = repayment.values

# Data Cleaning[calculating Average of age and replacing it with ages which are less than 18]
count = 0
age = 0

for i in range(customer_acquisition_array.shape[0]):
  age = age + customer_acquisition_array[i][2]


avg_age = age/100

print("average age of employees is : ", avg_age)

# validating ages

for i in range(customer_acquisition_array.shape[0]):
  if(customer_acquisition_array[i][2] < 18):
    customer_acquisition_array[i][2] = avg_age

dates = np.array([np.datetime64(row[2]) for row in spend_array])
sorted_indices = np.argsort(dates)
sorted_data = spend_array[sorted_indices]

print(sorted_data[0])

#TASK 1 MONTHLY EXPENDITURE
# Create column names
cols = ['index', 'customer_id', 'date', 'category', 'amount', '', '', '']

# Create a pandas DataFrame
df = pd.DataFrame(sorted_data, columns=cols)

def parse_date(date_string):
  # Parse the date string (assuming 'YYYY-MM-DD HH:MM:SS' format)
  return pd.to_datetime(date_string)

def monthly_expenditure(data):
  # Parse dates and extract month and year
  data['date'] = data['date'].apply(parse_date)
  data['month'] = data['date'].dt.month
  data['year'] = data['date'].dt.year

  # Calculate monthly expenditure by grouping by customer ID, month and year
  return data.groupby(['customer_id', 'month', 'year'])['amount'].sum().unstack(fill_value=0)

def yearly_expenditure(monthly_data):
  # Calculate yearly expenditure by summing across months
  return monthly_data.sum(axis=1).unstack(fill_value=0)

# Get monthly and yearly expenditure
monthly_expenditure_df = monthly_expenditure(df.copy())
yearly_expenditure_df = yearly_expenditure(monthly_expenditure_df.copy())

# Print monthly expenditure
print(monthly_expenditure_df)
monthly_expenditure_df.to_csv('monthly_expenditure.csv')
# Print yearly expenditure
#print(yearly_expenditure_df)

print(repayment_array[0])

#TASK 2 Monthly REPAYMENT
# Create column names
cols = ['index', 'customer_id', 'date', 'amount', '', '', '', '','']

# Create a pandas DataFrame
df = pd.DataFrame(repayment_array, columns=cols)

def parse_date(date_string):
  # Parse the date string (assuming 'YYYY-MM-DD HH:MM:SS' format)
  return pd.to_datetime(date_string)

def monthly_repayment(data):
  # Parse dates and extract month and year
  data['date'] = data['date'].apply(parse_date)
  data['month'] = data['date'].dt.month
  data['year'] = data['date'].dt.year

  # Calculate monthly repayment by grouping by customer ID, month and year
  return data.groupby(['customer_id', 'month', 'year'])['amount'].sum().unstack(fill_value=0)

def yearly_repayment(monthly_data):
  # Calculate yearly expenditure by summing across months
  return monthly_data.sum(axis=1).unstack(fill_value=0)

# Get monthly and yearly expenditure
monthly_repayment_df = monthly_repayment(df.copy())
yearly_repayment_df = yearly_repayment(monthly_expenditure_df.copy())

# Print monthly expenditure
print(monthly_repayment_df)
monthly_repayment_df.to_csv('monthly_repayment.csv')
# Print yearly expenditure
#print(yearly_expenditure_df)



#Task 4[People in which segment are spending more money.]
spend = [0]*101
for i in range(spend_array.shape[0]):
  cur = int(spend_array[i][1][1:len(spend_array[i][1])])
  spend[cur] = spend[cur] + spend_array[i][4]

segment = {
    'Self Employed': 0,
    'Govt': 0,
    'Normal Salary': 0,
    'Salaried_MNC': 0,
    'Salaried_Pvt': 0
}

for i in range(100):
  segment[customer_acquisition_array[i][7]] = segment[customer_acquisition_array[i][7]] + spend[i]

keys = list(segment.keys())
values = list(segment.values())
plt.figure(figsize=(10, 5))
plt.bar(keys, values, color='orange')

# Task 5[Which age group is spending more money? ]

ageDivision = {
    '0 - 20': 0,
    '20 - 40': 0,
    '40 - 60': 0,
    '> 60': 0,
}

for i in range(100):
  if(customer_acquisition_array[i][2] < 20):
    ageDivision['0 - 20'] = ageDivision['0 - 20'] + spend[i]
  elif(customer_acquisition_array[i][2] < 40):
    ageDivision['20 - 40'] = ageDivision['20 - 40'] + spend[i]
  elif(customer_acquisition_array[i][2] < 60):
    ageDivision['40 - 60'] = ageDivision['40 - 60'] + spend[i]
  else:
    ageDivision['> 60'] = ageDivision['> 60'] + spend[i]

keys = list(ageDivision.keys())
values = list(ageDivision.values())
plt.figure(figsize=(10, 5))
plt.bar(keys, values, color='green')

# Task 6[Which is the most profitable segment? ]
repay = [0]*101
for i in range(repayment_array.shape[0]):
  cur = int(repayment_array[i][1][1:len(repayment_array[i][1])])
  repay[cur] = repay[cur] + repayment_array[i][3]

Repaysegment = {
    'Self Employed': 0,
    'Govt': 0,
    'Normal Salary': 0,
    'Salaried_MNC': 0,
    'Salaried_Pvt': 0
}

for i in range(100):
  Repaysegment[customer_acquisition_array[i][7]] = Repaysegment[customer_acquisition_array[i][7]] + spend[i]

keys = list(Repaysegment.keys())
values = list(Repaysegment.values())
plt.figure(figsize=(10, 5))
plt.bar(keys, values, color='red')

# Task 7[In which category the customers are spending more money? ]
category = {
    'Gold': 0,
    'Silver': 0,
    'Platimum': 0
}

for i in range(100):
  category[customer_acquisition_array[i][4]] = category[customer_acquisition_array[i][4]] + spend[i]

keys = list(category.keys())
values = list(category.values())
plt.figure(figsize=(8, 3))
plt.bar(keys, values, color='pink')

#TASK 8[Impose an interest rate of 2.9% for each customer for any due amount.]

interest = [0] * 101

for i in range(101):
  interest[i] = 1.029 * (- spend[i] + repay[i])

data = np.array(interest)

# Line Graph
plt.figure(figsize=(8, 3))  # Optional: setting the figure size for better readability
plt.plot(data, marker='o', linestyle='-', color='r')  # Plotting the line graph
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Line Graph of Data Array')
plt.grid(True)
plt.show()

#TASK 3 [Highest paying 10 customers. ]
sorted_indices = np.argsort(spend)[::-1][:10]


for i in range(10):
  s = 'A' + str(sorted_indices[i])
  print(s)

#TASK 9 [Monthly profit for the bank.]